#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    # chroot      /var/lib/haproxy
    # pidfile     /var/run/haproxy.pid
    maxconn     4000
    # user        haproxy
    # group       haproxy
    daemon

    # turn on stats unix socket
    # stats socket /var/lib/haproxy/stats
    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # Default ciphers to use on SSL-enabled listening sockets.
    # For more information, see ciphers(1SSL).
    ssl-default-bind-ciphers kEECDH+aRSA+AES:kRSA+AES:+AES256:RC4-SHA:!kEDH:!LOW:!EXP:!MD5:!aNULL:!eNULL
#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-tunnel
    # option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000
    # errorfile 400 /etc/haproxy/errors/400.http
    # errorfile 403 /etc/haproxy/errors/403.http
    # errorfile 408 /etc/haproxy/errors/408.http
    # errorfile 500 /etc/haproxy/errors/500.http
    # errorfile 502 /etc/haproxy/errors/502.http
    # errorfile 503 /etc/haproxy/errors/503.http
    # errorfile 504 /etc/haproxy/errors/504.http

frontend front_app
    bind *:5000
    mode http

    acl url_app1 path_beg /app1
    use_backend app1 if url_app1

    acl url_app2 path_beg /app2
    use_backend app2 if url_app2

    default_backend app

frontend front_app_ssl
    bind *:5443 ssl crt /etc/ssl/private/vhtest.staxter.dev.pem
    mode http

    acl url_app1 path_beg /app1
    use_backend app1 if url_app1

    acl url_app2 path_beg /app2
    use_backend app2 if url_app2

    default_backend app

#---------------------------------------------------------------------
# backend for applications
#---------------------------------------------------------------------
backend app1
    mode http
    balance     roundrobin
    server      app11 ip-192-168-153-50.eu-west-1.compute.internal:32551 check
    server      app12 ip-192-168-161-76.eu-west-1.compute.internal:32551 check
    server      app13 ip-192-168-121-216.eu-west-1.compute.internal:32551 check

backend app2
    mode http
    balance     roundrobin
    server      app21 ip-192-168-153-50.eu-west-1.compute.internal:32552 check
    server      app22 ip-192-168-161-76.eu-west-1.compute.internal:32552 check
    server      app23 ip-192-168-121-216.eu-west-1.compute.internal:32552 check

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
backend app
    balance     roundrobin
    server      app1 ip-192-168-153-50.eu-west-1.compute.internal:32551 check
    server      app2 ip-192-168-161-76.eu-west-1.compute.internal:32551 check
    server      app3 ip-192-168-121-216.eu-west-1.compute.internal:32551 check

